<class>
<keyword> class </keyword>
<identifier_class_def> SquareGame </identifier_class_def>
<symbol> { </symbol>
<classVarDec>
<keyword> field </keyword>
<identifier_class_used> Square </identifier_class_used>
<identifier_field_0_def> square </identifier_field_0_def>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier_field_1_def> direction </identifier_field_1_def>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> constructor </keyword>
<identifier_class_used> SquareGame </identifier_class_used>
<identifier_subroutine_def> new </identifier_subroutine_def>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier_field_0_used> square </identifier_field_0_used>
<symbol> = </symbol>
<expression>
<term>
<identifier_field_0_used> square </identifier_field_0_used>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier_field_1_used> direction </identifier_field_1_used>
<symbol> = </symbol>
<expression>
<term>
<identifier_field_1_used> direction </identifier_field_1_used>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier_field_0_used> square </identifier_field_0_used>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier_subroutine_def> dispose </identifier_subroutine_def>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier_field_0_used> square </identifier_field_0_used>
<symbol> . </symbol>
<identifier_subroutine_used> dispose </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier_class_used> Memory </identifier_class_used>
<symbol> . </symbol>
<identifier_subroutine_used> deAlloc </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier_field_0_used> square </identifier_field_0_used>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier_subroutine_def> moveSquare </identifier_subroutine_def>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier_field_1_used> direction </identifier_field_1_used>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier_field_0_used> square </identifier_field_0_used>
<symbol> . </symbol>
<identifier_subroutine_used> moveUp </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier_field_1_used> direction </identifier_field_1_used>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier_field_0_used> square </identifier_field_0_used>
<symbol> . </symbol>
<identifier_subroutine_used> moveDown </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier_field_1_used> direction </identifier_field_1_used>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier_field_0_used> square </identifier_field_0_used>
<symbol> . </symbol>
<identifier_subroutine_used> moveLeft </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier_field_1_used> direction </identifier_field_1_used>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier_field_0_used> square </identifier_field_0_used>
<symbol> . </symbol>
<identifier_subroutine_used> moveRight </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<doStatement>
<keyword> do </keyword>
<identifier_class_used> Sys </identifier_class_used>
<symbol> . </symbol>
<identifier_subroutine_used> wait </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier_field_1_used> direction </identifier_field_1_used>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier_subroutine_def> run </identifier_subroutine_def>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> char </keyword>
<identifier_local_0_def> key </identifier_local_0_def>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier_local_1_def> exit </identifier_local_1_def>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier_local_1_used> exit </identifier_local_1_used>
<symbol> = </symbol>
<expression>
<term>
<identifier_local_0_used> key </identifier_local_0_used>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier_local_1_used> exit </identifier_local_1_used>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier_local_0_used> key </identifier_local_0_used>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier_local_0_used> key </identifier_local_0_used>
<symbol> = </symbol>
<expression>
<term>
<identifier_local_0_used> key </identifier_local_0_used>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier_subroutine_used> moveSquare </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier_local_0_used> key </identifier_local_0_used>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier_local_1_used> exit </identifier_local_1_used>
<symbol> = </symbol>
<expression>
<term>
<identifier_local_1_used> exit </identifier_local_1_used>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier_local_0_used> key </identifier_local_0_used>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier_field_0_used> square </identifier_field_0_used>
<symbol> . </symbol>
<identifier_subroutine_used> decSize </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier_local_0_used> key </identifier_local_0_used>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier_field_0_used> square </identifier_field_0_used>
<symbol> . </symbol>
<identifier_subroutine_used> incSize </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier_local_0_used> key </identifier_local_0_used>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier_field_1_used> direction </identifier_field_1_used>
<symbol> = </symbol>
<expression>
<term>
<identifier_local_1_used> exit </identifier_local_1_used>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier_local_0_used> key </identifier_local_0_used>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier_field_1_used> direction </identifier_field_1_used>
<symbol> = </symbol>
<expression>
<term>
<identifier_local_0_used> key </identifier_local_0_used>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier_local_0_used> key </identifier_local_0_used>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier_field_1_used> direction </identifier_field_1_used>
<symbol> = </symbol>
<expression>
<term>
<identifier_field_0_used> square </identifier_field_0_used>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier_local_0_used> key </identifier_local_0_used>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier_field_1_used> direction </identifier_field_1_used>
<symbol> = </symbol>
<expression>
<term>
<identifier_field_1_used> direction </identifier_field_1_used>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier_local_0_used> key </identifier_local_0_used>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier_local_0_used> key </identifier_local_0_used>
<symbol> = </symbol>
<expression>
<term>
<identifier_local_0_used> key </identifier_local_0_used>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier_subroutine_used> moveSquare </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
