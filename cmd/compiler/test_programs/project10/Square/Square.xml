<class>
<keyword> class </keyword>
<identifier_class_def> Square </identifier_class_def>
<symbol> { </symbol>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier_field_0_def> x </identifier_field_0_def>
<symbol> , </symbol>
<identifier_field_1_def> y </identifier_field_1_def>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier_field_2_def> size </identifier_field_2_def>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> constructor </keyword>
<identifier_class_used> Square </identifier_class_used>
<identifier_subroutine_def> new </identifier_subroutine_def>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier_argument_0_def> Ax </identifier_argument_0_def>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier_argument_1_def> Ay </identifier_argument_1_def>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier_argument_2_def> Asize </identifier_argument_2_def>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier_field_0_used> x </identifier_field_0_used>
<symbol> = </symbol>
<expression>
<term>
<identifier_argument_0_used> Ax </identifier_argument_0_used>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier_field_1_used> y </identifier_field_1_used>
<symbol> = </symbol>
<expression>
<term>
<identifier_argument_1_used> Ay </identifier_argument_1_used>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier_field_2_used> size </identifier_field_2_used>
<symbol> = </symbol>
<expression>
<term>
<identifier_argument_2_used> Asize </identifier_argument_2_used>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier_subroutine_used> draw </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier_subroutine_def> dispose </identifier_subroutine_def>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier_class_used> Memory </identifier_class_used>
<symbol> . </symbol>
<identifier_subroutine_used> deAlloc </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier_subroutine_def> draw </identifier_subroutine_def>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier_class_used> Screen </identifier_class_used>
<symbol> . </symbol>
<identifier_subroutine_used> setColor </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier_class_used> Screen </identifier_class_used>
<symbol> . </symbol>
<identifier_subroutine_used> drawRectangle </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier_field_0_used> x </identifier_field_0_used>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_1_used> y </identifier_field_1_used>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_0_used> x </identifier_field_0_used>
</term>
<symbol> + </symbol>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_1_used> y </identifier_field_1_used>
</term>
<symbol> + </symbol>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier_subroutine_def> erase </identifier_subroutine_def>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier_class_used> Screen </identifier_class_used>
<symbol> . </symbol>
<identifier_subroutine_used> setColor </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier_class_used> Screen </identifier_class_used>
<symbol> . </symbol>
<identifier_subroutine_used> drawRectangle </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier_field_0_used> x </identifier_field_0_used>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_1_used> y </identifier_field_1_used>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_0_used> x </identifier_field_0_used>
</term>
<symbol> + </symbol>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_1_used> y </identifier_field_1_used>
</term>
<symbol> + </symbol>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier_subroutine_def> incSize </identifier_subroutine_def>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier_field_1_used> y </identifier_field_1_used>
</term>
<symbol> + </symbol>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 254 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier_field_0_used> x </identifier_field_0_used>
</term>
<symbol> + </symbol>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 510 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier_subroutine_used> erase </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier_field_2_used> size </identifier_field_2_used>
<symbol> = </symbol>
<expression>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier_subroutine_used> draw </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier_subroutine_def> decSize </identifier_subroutine_def>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
<symbol> &gt; </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier_subroutine_used> erase </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier_field_2_used> size </identifier_field_2_used>
<symbol> = </symbol>
<expression>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier_subroutine_used> draw </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier_subroutine_def> moveUp </identifier_subroutine_def>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier_field_1_used> y </identifier_field_1_used>
</term>
<symbol> &gt; </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier_class_used> Screen </identifier_class_used>
<symbol> . </symbol>
<identifier_subroutine_used> setColor </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier_class_used> Screen </identifier_class_used>
<symbol> . </symbol>
<identifier_subroutine_used> drawRectangle </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier_field_0_used> x </identifier_field_0_used>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier_field_1_used> y </identifier_field_1_used>
</term>
<symbol> + </symbol>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_0_used> x </identifier_field_0_used>
</term>
<symbol> + </symbol>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_1_used> y </identifier_field_1_used>
</term>
<symbol> + </symbol>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier_field_1_used> y </identifier_field_1_used>
<symbol> = </symbol>
<expression>
<term>
<identifier_field_1_used> y </identifier_field_1_used>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier_class_used> Screen </identifier_class_used>
<symbol> . </symbol>
<identifier_subroutine_used> setColor </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier_class_used> Screen </identifier_class_used>
<symbol> . </symbol>
<identifier_subroutine_used> drawRectangle </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier_field_0_used> x </identifier_field_0_used>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_1_used> y </identifier_field_1_used>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_0_used> x </identifier_field_0_used>
</term>
<symbol> + </symbol>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_1_used> y </identifier_field_1_used>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier_subroutine_def> moveDown </identifier_subroutine_def>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier_field_1_used> y </identifier_field_1_used>
</term>
<symbol> + </symbol>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 254 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier_class_used> Screen </identifier_class_used>
<symbol> . </symbol>
<identifier_subroutine_used> setColor </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier_class_used> Screen </identifier_class_used>
<symbol> . </symbol>
<identifier_subroutine_used> drawRectangle </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier_field_0_used> x </identifier_field_0_used>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_1_used> y </identifier_field_1_used>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_0_used> x </identifier_field_0_used>
</term>
<symbol> + </symbol>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_1_used> y </identifier_field_1_used>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier_field_1_used> y </identifier_field_1_used>
<symbol> = </symbol>
<expression>
<term>
<identifier_field_1_used> y </identifier_field_1_used>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier_class_used> Screen </identifier_class_used>
<symbol> . </symbol>
<identifier_subroutine_used> setColor </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier_class_used> Screen </identifier_class_used>
<symbol> . </symbol>
<identifier_subroutine_used> drawRectangle </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier_field_0_used> x </identifier_field_0_used>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier_field_1_used> y </identifier_field_1_used>
</term>
<symbol> + </symbol>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_0_used> x </identifier_field_0_used>
</term>
<symbol> + </symbol>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_1_used> y </identifier_field_1_used>
</term>
<symbol> + </symbol>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier_subroutine_def> moveLeft </identifier_subroutine_def>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier_field_0_used> x </identifier_field_0_used>
</term>
<symbol> &gt; </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier_class_used> Screen </identifier_class_used>
<symbol> . </symbol>
<identifier_subroutine_used> setColor </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier_class_used> Screen </identifier_class_used>
<symbol> . </symbol>
<identifier_subroutine_used> drawRectangle </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier_field_0_used> x </identifier_field_0_used>
</term>
<symbol> + </symbol>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_1_used> y </identifier_field_1_used>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_0_used> x </identifier_field_0_used>
</term>
<symbol> + </symbol>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_1_used> y </identifier_field_1_used>
</term>
<symbol> + </symbol>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier_field_0_used> x </identifier_field_0_used>
<symbol> = </symbol>
<expression>
<term>
<identifier_field_0_used> x </identifier_field_0_used>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier_class_used> Screen </identifier_class_used>
<symbol> . </symbol>
<identifier_subroutine_used> setColor </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier_class_used> Screen </identifier_class_used>
<symbol> . </symbol>
<identifier_subroutine_used> drawRectangle </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier_field_0_used> x </identifier_field_0_used>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_1_used> y </identifier_field_1_used>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_0_used> x </identifier_field_0_used>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_1_used> y </identifier_field_1_used>
</term>
<symbol> + </symbol>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier_subroutine_def> moveRight </identifier_subroutine_def>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier_field_0_used> x </identifier_field_0_used>
</term>
<symbol> + </symbol>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 510 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier_class_used> Screen </identifier_class_used>
<symbol> . </symbol>
<identifier_subroutine_used> setColor </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier_class_used> Screen </identifier_class_used>
<symbol> . </symbol>
<identifier_subroutine_used> drawRectangle </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier_field_0_used> x </identifier_field_0_used>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_1_used> y </identifier_field_1_used>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_0_used> x </identifier_field_0_used>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_1_used> y </identifier_field_1_used>
</term>
<symbol> + </symbol>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<identifier_field_0_used> x </identifier_field_0_used>
<symbol> = </symbol>
<expression>
<term>
<identifier_field_0_used> x </identifier_field_0_used>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier_class_used> Screen </identifier_class_used>
<symbol> . </symbol>
<identifier_subroutine_used> setColor </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier_class_used> Screen </identifier_class_used>
<symbol> . </symbol>
<identifier_subroutine_used> drawRectangle </identifier_subroutine_used>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier_field_0_used> x </identifier_field_0_used>
</term>
<symbol> + </symbol>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_1_used> y </identifier_field_1_used>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_0_used> x </identifier_field_0_used>
</term>
<symbol> + </symbol>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier_field_1_used> y </identifier_field_1_used>
</term>
<symbol> + </symbol>
<term>
<identifier_field_2_used> size </identifier_field_2_used>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
