
/** Implements a graphical grid. */
class Grid {
    field Array grid;
    field int nbrRows, nbrCols; // screen location of the square's top-left corner
    field int sizeSquare;
    field Array suc1;
    field Array suc2;

    constructor Grid new() {
        var int i, j;
        var Array line;

        let nbrRows = 16;
        let nbrCols = 32;
        let sizeSquare = 16;

        let grid = Array.new(nbrRows);
        let suc1 = Array.new(nbrCols);
        let suc2 = Array.new(nbrCols);

        let i = 0;
        while (i < nbrRows) {
            let grid[i] = Array.new(nbrCols);
            let line = grid[i];
            let j = 0;
            while (j < nbrCols) {
                let line[j] = 0;
                let j = j+1;
            }
            let i = i+1;
        }

        do set(1, 1);
        do set(2, 1);
        do set(3, 1);
        do set(2, 2);

        do set(1, 7);
        do set(2, 7);
        do set(3, 7);
        do set(3, 8);
        do set(3, 9);

        do draw();
        return this;
    }

    method void set(int i, int j) {
        var Array line;
        let line = grid[i];
        let line[j] = 1;
        return;
    }

    method void draw() {
        var int i, j;
        var Array line;

        do Screen.clearScreen();

        let i =0;
        while ( i < nbrRows ) {
            let line = grid[i];
            let j =0;
            while ( j < nbrCols ) {
                if ( line[j] = 1 ) {
                    do drawRectangle(i, j);
                }
                let j = j+1;
            }
            let i = i+1;
        }
        return;
    }


    method int sumColOfThree(int i, int j) {
        var Array line;
        var int sum;
        let sum = 0;

        if ( j = nbrRows) {
            let j = 0;
        }
        if ( j = -1) {          // not being hit by other code in this project, but makes it coherent
            let j = nbrRows-1;
        }

        if ( i = 0 ) {
            let line = grid[nbrRows-1];
        } else {
            let line = grid[i-1];
        }
        let sum = sum + line[j];

        let line = grid[i];
        let sum = sum + line[j];

        if ( i = nbrCols-1 ) {
            let line = grid[0];
        } else {
            let line = grid[i+1];
        }
        let sum = sum + line[j];

        do line.dispose();
        return sum;
    }

    method void computeSuccessor(int i) {
        var Array tmp;
        var int sum;
        var int sumLeft;
        var int sumMiddle;
        var int sumRight;
        var int j;


        let j = 0;
        let sumLeft = sumColOfThree(i, nbrRows-1);
        let sumMiddle = sumColOfThree(i, 0);
        let sum = sumLeft + sumMiddle;
        while ( j < nbrCols ) {
            let sumRight = sumColOfThree(i, j+1);
            let sum = sum + sumRight;

            if ( sum = 3 ) {
                let suc2[j] = 1;
            } else {
                if ( sum = 4 ) {
                    let tmp = grid[i];
                    let suc2[j] = tmp[j];
                } else {
                    let suc2[j] = 0;
                }
            }

            let sumLeft = sumMiddle;
            let sumMiddle = sumRight;
            let sum = sum - sumLeft;
            let j = j+1;
        }

        return;
    }

    method void copy(Array src, Array dest) {
        var int j;
        let j = 0;
        while (j < nbrCols) {
            let dest[j] = src[j]
            let j = j+1;
        }
        return;
    }

    method void update() {
        var int i;
        var Array line;

        do computeSuccessor(0); // saving to set first row in grid after while loop

        let i = 1;
        while ( i < nbrRows ) {
            do computeSuccessor(i);

            if (i > 1) {
                do copy(suc1, grid[i-1]);
            }
            let suc1 = suc2;
            let i = i+1;
            do printRow(grid[1]);
        }
        let grid[nbrRows-1]=suc1;
        return;
    }

    method void printRow(Array row) {
        var int j;
        let j = 0;
        while (j < nbrCols) {
            do Output.printInt(row[j]);
            let j = j+1;
        }

        do Output.println();
        return;
    }

    method void printSuc2() {
        var int j;
        let j = 0;
        while (j < nbrCols) {
            do Output.printInt(suc2[j]);
            let j = j+1;
        }

        do Output.println();
        return;
    }

    method void printGrid() {
        var int i, j;
        var Array line;

        let i =0;
        while ( i < nbrRows ) {
            let line = grid[i];
            let j =0;
            while ( j < nbrCols ) {
                do Output.printInt(line[j]);
                let j = j+1;
            }
            do Output.println();
            let i = i+1;
        }
        do Output.println();
        return;
    }

    method void drawRectangle(int i, int j) {
        var char key;
        var int x1, y1;
        var int x2, y2;
        let x1 = i * sizeSquare;
        let y1 = j * sizeSquare;
        let x2 = x1 + sizeSquare-1;
        let y2 = y1 + sizeSquare-1;

        do Screen.setColor(true);
        do Screen.drawRectangle(y1, x1, y2, x2);

        return;
    }



    /** Disposes this square. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}
