
/** Implements a graphical grid. */
class Grid {
    field Array grid;
    field int nbrRows, nbrCols; // screen location of the square's top-left corner
    field int sizeSquare;

    constructor Grid new() {
        var int i, j;
        var Array line;

        let nbrRows = 16;
        let nbrCols = 32;
        let sizeSquare = 16;

        let grid = Array.new(nbrRows);

        let i = 0;
        while (i < nbrRows) {
            let grid[i] = Array.new(nbrCols);
            let line = grid[i];
            let j = 0;
            while (j < nbrCols) {
                let line[j] = 0;
                let j = j+1;
            }
            let i = i+1;
        }

        return this;
    }

    method int sumColOfThree(int i, int j) {
        var Array line;
        var int sum;
        let sum = 0;

        // if ( j = nbrRows) {
        //     let j = 0;
        // }
        // if ( j = -1) {          // not being hit by other code in this project, but makes it coherent
        //     let j = nbrRows-1;
        // }

        // if ( i = 0 ) {
        //     let line = grid[nbrRows-1];
        // } else {
        //     let line = grid[i-1];
        // }
        // let sum = sum + line[j];

        // let line = grid[i];
        // let sum = sum + line[j];

        // if ( i = nbrCols-1 ) {
        //     let line = grid[0];
        // } else {
        //     let line = grid[i+1];
        // }
        // let sum = sum + line[j];

        // do line.dispose();
        return sum;
    }

    method Array computeSuccessor(int i) {
        var Array suc;
        // var Array tmp;
        var int sum;
        var int sumLeft;
        var int sumMiddle;
        var int sumRight;
        var int j;

        let suc = Array.new(nbrCols);

        let j = 0;
        let sumLeft = sumColOfThree(i, nbrRows-1);
        let sumMiddle = sumColOfThree(i, 0);
        let sum = sumLeft + sumMiddle;
        while ( j < nbrCols ) {
            let sumRight = sumColOfThree(i, j+1);
            let sum = sum + sumRight;

            // check if it's three or whatever
            if ( sum = 3 ) {
                let suc[j] = 1;
            } else {
                if ( sum = 4 ) {
                    // let tmp = grid[i];
                    // let suc[j] = tmp[j];
                    let suc[j] = 0;
                } else {
                    let suc[j] = 0;
                }
            }
            let sumLeft = sumMiddle;
            let sumMiddle = sumRight;
            let sum = sum - sumLeft;
            let j = j+1;
        }

        // do tmp.dispose();
        return suc;
    }

    method void update() {
        var int i;
        var Array first;
        var Array suc1;
        var Array suc2;

        // do computeSuccessor(0); // saving to set first row in grid after while loop
        let first = computeSuccessor(0); // saving to set first row in grid after while loop
        do first.dispose();
        // let first = suc2;

        // let i = 1;
        // while ( i < nbrRows ) {
        //     let suc2 = computeSuccessor(i);
        //     if (i > 1) {
        //         let grid[i-1] = suc1;
        //     }
        //     let suc1 = suc2;
        //     let i = i+1;
        // }
        // let grid[nbrRows-1]=suc1;
        // let grid[0]=first;

        // do first.dispose();
        // do suc1.dispose();
        // do suc2.dispose();
        return;
    }

    method void drawRectangle(int i, int j) {
        var char key;
        var int x1, y1;
        var int x2, y2;
        let x1 = i * sizeSquare;
        let y1 = j * sizeSquare;
        let x2 = x1 + sizeSquare-1;
        let y2 = y1 + sizeSquare-1;

        do Screen.setColor(true);
        do Screen.drawRectangle(y1, x1, y2, x2);

        return;
    }

    /** Disposes this square. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}
