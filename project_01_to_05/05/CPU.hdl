// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Definitions:
    // opCode, notOpCode, a, zx, nx, zy, ny, f, no, d1, d2, d3, j1, j2, j3,loadA

    And (a=instruction[15], b=true, out=opCode);
    Not (in=opCode, out=notOpCode);
    And(a=instruction[12], b=true, out=a);

    And(a=instruction[11], b=true, out=zx);
    And(a=instruction[10], b=true, out=nx);
    And(a=instruction[9], b=true, out=zy);
    And(a=instruction[8], b=true, out=ny);
    And(a=instruction[7], b=true, out=f);
    And(a=instruction[6], b=true, out=no);

    And(a=instruction[5], b=true, out=d1);
    And(a=instruction[4], b=true, out=d2);
    And(a=instruction[3], b=true, out=d3);

    And(a=instruction[2], b=true, out=j1);
    And(a=instruction[1], b=true, out=j2);
    And(a=instruction[0], b=true, out=j3);
    Or (a=d1, b=notOpCode, out=loadA);

    // Logic:
    Mux (a=false, b=d3, sel=opCode, out=writeM);

    Mux16 (a=instruction, b=outALU, sel=opCode, out=mux1);
    ARegister (in=mux1, load=loadA, out=outA, out[0..14]=addressM);

    ALU (x=outD, y=mux2, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, zr=zr, ng=ng, out=outALU, out=outM);

    Mux16 (a=outA, b=inM, sel=a, out=mux2);

    Mux (a=false, b=d2, sel=opCode, out=loadD);
    DRegister (in=outALU, load=loadD, out=outD);

    Not (in=zr, out=notZr);
    Not (in=ng, out=notNg);
    And (a=notZr, b=notNg, out=po);
    Not (in=po, out=notPo);

    DMux8Way (in=true, sel=instruction[0..2], a=NULL, b=JGT, c=JEQ, d=JGR, e=JLT, f=JNE, g=JLE, h=UNC);
    And (a=JGT, b=po, out=l1);
    And (a=JEQ, b=zr, out=l2);
    And (a=JGR, b=notNg, out=l3);
    And (a=JLT, b=ng, out=l4);
    And (a=JNE, b=notZr, out=l5);
    And (a=JLE, b=notPo, out=l6);

    Or8Way(in[0]=false, in[1]=l1, in[2]=l2, in[3]=l3, in[4]=l4, in[5]=l5, in[6]=l6, in[7]=UNC, out=loadBeforeOp);
    Mux (a=false, b=loadBeforeOp, sel=opCode, out=load);
    Not(in=load, out=inc);

    PC (in=outA, load=load, inc=inc, reset=reset, out[0..14]=pc);
}
