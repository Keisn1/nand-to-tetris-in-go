#+title: Computer Architecture

We have all the building blocks of a Computer. We have registers that we need to construct a memory from and we have an ALU, that combined with dedicated registers and a Program Counter, will form our CPU.

* Basic Architecture

The computer can be viewed as a set of chips that is connected by buses (conceptionally).

[[file:imgs/basic_archi.png]]

*Data Bus*:
- Holds the data that an instruction is to be executed on
- emited by data-memory
- read by ALU

*Control Bus*:
- Holds the next instruction to be executed
- emited by program-memory
- read by ALU

*Address Bus*:
- Holds
  - either the address of the next instruction to be executed
  - or the address of the data, that a instruction should be executed on
- emitted by address register or program counter
- read by memory

*Problem*:

How does one know what the address bus is currently holding?

The address of an instruction or the address of some data?


* Fetch-Execute Cycle

[[file:imgs/fetch_execute_issues.png]]

** Two-cycle solution

To solve this problem, one can imagine a simple Loop, where the address present in the address bus is interpreted either as an instruction to be retrieved *fetch* or the address of a data point, that a instruction is executed upon.

[[file:imgs/twoCycle.png]]

** Single-cycle solution

Another solution would be to have 2 seperate physical memories, where both memories are accessed simultanieously, in the same cycle

[[file:imgs/single_cycle.png]]

** Hack Solution

The Hack Computer Architecture has a unique design and solves the issue in a mix of both ways.

The Hack Computer is only reading instructions, but it is either an instruction that computes something (C-instruction), or it is acutally the instruction to feed some data ([[file:~/workspace/nand-to-tetris-in-go/project_01_to_05/04/README.org::*A-Instruction (and A-register)][A-instruction]]).
