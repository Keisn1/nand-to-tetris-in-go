// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int count, powerOfTwo;
        let count = 0;
        let powerOfTwo = 1;
        let twoToThe = Array.new(16);

        while (count<16) {
            let twoToThe[count] = powerOfTwo;
            let powerOfTwo = powerOfTwo + powerOfTwo;
            let count = count + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, count;
        let sum = 0;
        let shiftedX = x;
        let count = 0;

        while (count < 16) {
            if ((Math.bit(y, count))) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let count = count + 1;
        }
        return sum;
    }

    function boolean bit(int x, int i) {
        var int res;
        let res = x & twoToThe[i];
        if (res = 0) {
            return false;
        }
        return true;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int sign;
        let sign = 1;
        if (x < 0) {
            let x = -x;
            let sign = sign*(-1);
        }
        if (y < 0) {
            let y = -y;
            let sign = sign*(-1);
        }
        return sign * Math.divideAbs(x, y);
    }

    function int divideAbs(int x, int y) {
        var int q;

        if (y > x) {
            return 0;
        }
        if (y < 0) {
            return 0;
        }

        let q = Math.divide(x, y+y);
        if ((x - ((q+q) * y)) < y) {
            return q + q;
        } else {
            return q+q +1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j, y, twoPowerJ, temp;
        let y = 0;
        let j = 7;              // 16/2 -1
        while (~(j < 0)) {
            let twoPowerJ = twoToThe[j];
            let temp = (y + twoPowerJ) * (y +twoPowerJ);
            if ( ~(temp>x) ) {
                if ( temp > 0 ) {
                    let y = y + twoPowerJ;
                }
            }
            let j = j-1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b) {
            return b;
        }
        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b) {
            return b;
        }
        return a;
    }
}
